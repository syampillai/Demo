import type { EventName } from "@lit/react";
import { Dashboard as DashboardElement, type DashboardEventMap as _DashboardEventMap, type DashboardItem } from "@vaadin/dashboard/vaadin-dashboard.js";
import * as React from "react";
import { type WebComponentProps } from "../utils/createComponent.js";
export * from "@vaadin/dashboard/vaadin-dashboard.js";
export { DashboardElement, };
export type DashboardEventMap<T1 extends DashboardItem = DashboardItem> = Readonly<{
    onDashboardItemMoveModeChanged: EventName<_DashboardEventMap<T1>["dashboard-item-move-mode-changed"]>;
    onDashboardItemMoved: EventName<_DashboardEventMap<T1>["dashboard-item-moved"]>;
    onDashboardItemRemoved: EventName<_DashboardEventMap<T1>["dashboard-item-removed"]>;
    onDashboardItemResizeModeChanged: EventName<_DashboardEventMap<T1>["dashboard-item-resize-mode-changed"]>;
    onDashboardItemResized: EventName<_DashboardEventMap<T1>["dashboard-item-resized"]>;
    onDashboardItemSelectedChanged: EventName<_DashboardEventMap<T1>["dashboard-item-selected-changed"]>;
}>;
export type DashboardProps<T1 extends DashboardItem = DashboardItem> = WebComponentProps<DashboardElement<T1>, DashboardEventMap<T1>>;
export declare const Dashboard: <T1 extends DashboardItem = DashboardItem>(props: DashboardProps<T1> & React.RefAttributes<DashboardElement<T1>>) => React.ReactElement | null;
//# sourceMappingURL=Dashboard.d.ts.map