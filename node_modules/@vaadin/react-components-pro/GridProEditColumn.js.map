{
  "version": 3,
  "sources": ["src/GridProEditColumn.tsx", "src/generated/GridProEditColumn.ts"],
  "sourcesContent": ["export * from \"@vaadin/grid-pro/vaadin-grid-pro-edit-column.js\";\n/**\n * @license\n * Copyright (c) 2000 - 2024 Vaadin Ltd.\n *\n * This program is available under Vaadin Commercial License and Service Terms.\n *\n *\n * See https://vaadin.com/commercial-license-and-service-terms for the full\n * license.\n */\nimport React, { useLayoutEffect, useRef, useState } from 'react';\nimport { type ForwardedRef, forwardRef, type ReactElement, type ReactNode, type RefAttributes } from 'react';\nimport { flushSync } from 'react-dom';\nimport type { GridDefaultItem } from '@vaadin/react-components/Grid.js';\nimport type { GridColumnProps } from '@vaadin/react-components/GridColumn.js';\nimport {\n  GridProEditColumn as _GridProEditColumn,\n  type GridProEditColumnElement,\n  type GridProEditColumnProps as _GridProEditColumnProps,\n} from './generated/GridProEditColumn.js';\nimport { useModelRenderer } from '@vaadin/react-components/renderers/useModelRenderer.js';\nimport { useSimpleOrChildrenRenderer } from '@vaadin/react-components/renderers/useSimpleOrChildrenRenderer.js';\nimport type { OmittedGridColumnHTMLAttributes } from '@vaadin/react-components/GridColumn.js';\nimport useMergedRefs from '@vaadin/react-components/utils/useMergedRefs.js';\n\nexport * from './generated/GridProEditColumn.js';\n\ntype GridColumnRenderer<TItem> = GridColumnProps<TItem>['renderer'];\ntype GridColumnHeaderFooterRenderer<TItem> = GridColumnProps<TItem>['footerRenderer'];\n\nexport type GridProEditColumnProps<TItem> = Partial<\n  Omit<\n    _GridProEditColumnProps<TItem>,\n    | 'children'\n    | 'editModeRenderer'\n    | 'footerRenderer'\n    | 'header'\n    | 'headerRenderer'\n    | 'renderer'\n    | keyof OmittedGridColumnHTMLAttributes<TItem>\n  >\n> &\n  Readonly<{\n    children?: GridColumnRenderer<TItem>;\n    editModeRenderer?: GridColumnRenderer<TItem>;\n    footer?: ReactNode;\n    /**\n     * @deprecated Use `footer` instead.\n     */\n    footerRenderer?: GridColumnHeaderFooterRenderer<TItem>;\n    header?: ReactNode;\n    /**\n     * @deprecated Use `header` instead.\n     */\n    headerRenderer?: GridColumnHeaderFooterRenderer<TItem>;\n    renderer?: GridColumnRenderer<TItem>;\n  }>;\n\ntype GridProEditColumnElementInternals<TItem> = {\n  _clearCellContent(cell: HTMLElement & { [SKIP_CLEARING_CELL_CONTENT]?: boolean }): void;\n  _renderEditor(cell: HTMLElement & { [SKIP_CLEARING_CELL_CONTENT]?: boolean }, model: { item: TItem }): void;\n  _removeEditor(cell: HTMLElement & { [SKIP_CLEARING_CELL_CONTENT]?: boolean }, model: { item: TItem }): void;\n};\n\nconst SKIP_CLEARING_CELL_CONTENT = Symbol();\n\nfunction GridProEditColumn<TItem = GridDefaultItem>(\n  { children, footer, header, ...props }: GridProEditColumnProps<TItem>,\n  ref: ForwardedRef<GridProEditColumnElement<TItem>>,\n): ReactElement | null {\n  const [editedItem, setEditedItem] = useState<TItem | null>(null);\n\n  const [editModePortals, editModeRenderer] = useModelRenderer(props.editModeRenderer, {\n    // The web component implementation currently requires the editor to be rendered synchronously.\n    renderMode: 'sync',\n    shouldRenderPortal: (_root, _column, model) => editedItem === model.item,\n  });\n  const [headerPortals, headerRenderer] = useSimpleOrChildrenRenderer(props.headerRenderer, header, {\n    renderMode: 'microtask',\n  });\n  const [footerPortals, footerRenderer] = useSimpleOrChildrenRenderer(props.footerRenderer, footer, {\n    renderMode: 'microtask',\n  });\n  const [bodyPortals, bodyRenderer] = useModelRenderer(props.renderer ?? children, {\n    renderMode: 'microtask',\n    shouldRenderPortal: (_root, _column, model) => editedItem !== model.item,\n  });\n\n  const innerRef = useRef<GridProEditColumnElement<TItem> & GridProEditColumnElementInternals<TItem>>(null);\n  const finalRef = useMergedRefs(innerRef, ref);\n\n  useLayoutEffect(() => {\n    innerRef.current!._clearCellContent = function (cell) {\n      // Clearing cell content in _renderEditor and _removeEditor is decided\n      // based on whether the content was rendered by a React renderer or not.\n      if (!cell[SKIP_CLEARING_CELL_CONTENT]) {\n        Object.getPrototypeOf(this)._clearCellContent.call(this, cell);\n      }\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    innerRef.current!._renderEditor = function (cell, model) {\n      // Manually clear the cell content only if it was rendered by the default grid renderer.\n      // For content rendered by a React renderer, clearing is handled by removing the portal.\n      if (!bodyRenderer) {\n        this._clearCellContent(cell);\n      }\n\n      // Ensure the corresponding bodyRenderer portal is removed and the editModeRenderer portal\n      // is added instead.\n      flushSync(() => {\n        setEditedItem(model.item);\n      });\n\n      cell[SKIP_CLEARING_CELL_CONTENT] = true;\n      Object.getPrototypeOf(this)._renderEditor.call(this, cell, model);\n      cell[SKIP_CLEARING_CELL_CONTENT] = false;\n    };\n  }, [bodyRenderer]);\n\n  useLayoutEffect(() => {\n    innerRef.current!._removeEditor = function (cell, model) {\n      // Manually clear the cell content only if it was rendered by the default grid renderer.\n      // For content rendered by a React renderer, clearing is handled by removing the portal.\n      if (!editModeRenderer) {\n        this._clearCellContent(cell);\n      }\n\n      // Ensure the editModeRenderer portal is removed and the corresponding bodyRenderer portal\n      // is added again. Please note the bodyRenderer portal will be added synchronously even though\n      // the renderer has renderMode set to microtask. It's because the portal already has content\n      // from the previous render cycle and we just show it again.\n      flushSync(() => {\n        setEditedItem((editedItem) => {\n          return editedItem === model.item ? null : editedItem;\n        });\n      });\n\n      cell[SKIP_CLEARING_CELL_CONTENT] = true;\n      Object.getPrototypeOf(this)._removeEditor.call(this, cell, model);\n      cell[SKIP_CLEARING_CELL_CONTENT] = false;\n    };\n  }, [editModeRenderer]);\n\n  return (\n    <_GridProEditColumn<TItem>\n      {...props}\n      editModeRenderer={editModeRenderer}\n      footerRenderer={footerRenderer}\n      headerRenderer={headerRenderer}\n      ref={finalRef}\n      renderer={bodyRenderer}\n    >\n      {editModePortals}\n      {headerPortals}\n      {footerPortals}\n      {bodyPortals}\n    </_GridProEditColumn>\n  );\n}\n\nconst ForwardedGridProEditColumn = forwardRef(GridProEditColumn) as <TItem = GridDefaultItem>(\n  props: GridProEditColumnProps<TItem> & RefAttributes<GridProEditColumnElement<TItem>>,\n) => ReactElement | null;\n\nexport { ForwardedGridProEditColumn as GridProEditColumn };\n", "import type { EventName } from \"@lit/react\";\nimport { GridProEditColumn as GridProEditColumnElement, } from \"@vaadin/grid-pro/vaadin-grid-pro-edit-column.js\";\nimport * as React from \"react\";\nimport { createComponent, type WebComponentProps } from \"../utils/createComponent.js\";\nexport { GridProEditColumnElement, };\nexport type GridProEditColumnEventMap<T1> = Readonly<{\n    onEditorTypeChanged: EventName<CustomEvent<unknown>>;\n}>;\nconst events = { onEditorTypeChanged: \"editor-type-changed\" } as GridProEditColumnEventMap<any>;\nexport type GridProEditColumnProps<T1> = WebComponentProps<GridProEditColumnElement<T1>, GridProEditColumnEventMap<T1>>;\nexport const GridProEditColumn = createComponent({\n    elementClass: GridProEditColumnElement, events, react: React, tagName: \"vaadin-grid-pro-edit-column\"\n}) as <T1>(props: GridProEditColumnProps<T1> & React.RefAttributes<GridProEditColumnElement<T1>>) => React.ReactElement | null;\n"],
  "mappings": "AAAA,WAAc,kDAWd,OAAgB,mBAAAA,EAAiB,UAAAC,EAAQ,YAAAC,MAAgB,QACzD,OAA4B,cAAAC,MAAyE,QACrG,OAAS,aAAAC,MAAiB,YCZ1B,OAAS,qBAAqBC,MAAiC,kDAC/D,UAAYC,MAAW,QACvB,OAAS,mBAAAC,MAA+C,6BAKxD,IAAMC,EAAS,CAAE,oBAAqB,qBAAsB,EAE/CC,EAAoBC,EAAgB,CAC7C,aAAcC,EAA0B,OAAAH,EAAQ,MAAOI,EAAO,QAAS,6BAC3E,CAAC,EDSD,OAAS,oBAAAC,MAAwB,yDACjC,OAAS,+BAAAC,MAAmC,oEAE5C,OAAOC,MAAmB,kDA2HtB,eAAAC,MAAA,oBAlFJ,IAAMC,EAA6B,OAAO,EAE1C,SAASC,EACP,CAAE,SAAAC,EAAU,OAAAC,EAAQ,OAAAC,EAAQ,GAAGC,CAAM,EACrCC,EACqB,CACrB,GAAM,CAACC,EAAYC,CAAa,EAAIC,EAAuB,IAAI,EAEzD,CAACC,EAAiBC,CAAgB,EAAIf,EAAiBS,EAAM,iBAAkB,CAEnF,WAAY,OACZ,mBAAoB,CAACO,EAAOC,EAASC,IAAUP,IAAeO,EAAM,IACtE,CAAC,EACK,CAACC,EAAeC,CAAc,EAAInB,EAA4BQ,EAAM,eAAgBD,EAAQ,CAChG,WAAY,WACd,CAAC,EACK,CAACa,EAAeC,CAAc,EAAIrB,EAA4BQ,EAAM,eAAgBF,EAAQ,CAChG,WAAY,WACd,CAAC,EACK,CAACgB,EAAaC,CAAY,EAAIxB,EAAiBS,EAAM,UAAYH,EAAU,CAC/E,WAAY,YACZ,mBAAoB,CAACU,EAAOC,EAASC,IAAUP,IAAeO,EAAM,IACtE,CAAC,EAEKO,EAAWC,EAAmF,IAAI,EAClGC,EAAWzB,EAAcuB,EAAUf,CAAG,EAE5C,OAAAkB,EAAgB,IAAM,CACpBH,EAAS,QAAS,kBAAoB,SAAUI,EAAM,CAG/CA,EAAKzB,CAA0B,GAClC,OAAO,eAAe,IAAI,EAAE,kBAAkB,KAAK,KAAMyB,CAAI,CAEjE,CACF,EAAG,CAAC,CAAC,EAELD,EAAgB,IAAM,CACpBH,EAAS,QAAS,cAAgB,SAAUI,EAAMX,EAAO,CAGlDM,GACH,KAAK,kBAAkBK,CAAI,EAK7BC,EAAU,IAAM,CACdlB,EAAcM,EAAM,IAAI,CAC1B,CAAC,EAEDW,EAAKzB,CAA0B,EAAI,GACnC,OAAO,eAAe,IAAI,EAAE,cAAc,KAAK,KAAMyB,EAAMX,CAAK,EAChEW,EAAKzB,CAA0B,EAAI,EACrC,CACF,EAAG,CAACoB,CAAY,CAAC,EAEjBI,EAAgB,IAAM,CACpBH,EAAS,QAAS,cAAgB,SAAUI,EAAMX,EAAO,CAGlDH,GACH,KAAK,kBAAkBc,CAAI,EAO7BC,EAAU,IAAM,CACdlB,EAAeD,GACNA,IAAeO,EAAM,KAAO,KAAOP,CAC3C,CACH,CAAC,EAEDkB,EAAKzB,CAA0B,EAAI,GACnC,OAAO,eAAe,IAAI,EAAE,cAAc,KAAK,KAAMyB,EAAMX,CAAK,EAChEW,EAAKzB,CAA0B,EAAI,EACrC,CACF,EAAG,CAACW,CAAgB,CAAC,EAGnBZ,EAACE,EAAA,CACE,GAAGI,EACJ,iBAAkBM,EAClB,eAAgBO,EAChB,eAAgBF,EAChB,IAAKO,EACL,SAAUH,EAET,UAAAV,EACAK,EACAE,EACAE,GACH,CAEJ,CAEA,IAAMQ,EAA6BC,EAAW3B,CAAiB",
  "names": ["useLayoutEffect", "useRef", "useState", "forwardRef", "flushSync", "GridProEditColumnElement", "React", "createComponent", "events", "GridProEditColumn", "createComponent", "GridProEditColumnElement", "React", "useModelRenderer", "useSimpleOrChildrenRenderer", "useMergedRefs", "jsxs", "SKIP_CLEARING_CELL_CONTENT", "GridProEditColumn", "children", "footer", "header", "props", "ref", "editedItem", "setEditedItem", "useState", "editModePortals", "editModeRenderer", "_root", "_column", "model", "headerPortals", "headerRenderer", "footerPortals", "footerRenderer", "bodyPortals", "bodyRenderer", "innerRef", "useRef", "finalRef", "useLayoutEffect", "cell", "flushSync", "ForwardedGridProEditColumn", "forwardRef"]
}
